{
  "sources": [
    {
      "title": "Release notes from osmosfeed",
      "feedUrl": "https://github.com/osmoscraft/osmosfeed/releases.atom",
      "siteUrl": "https://github.com/osmoscraft/osmosfeed/releases",
      "articles": [
        {
          "id": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.14.4",
          "author": null,
          "description": "Fixed: Several style issues",
          "link": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.14.4",
          "publishedOn": "2022-02-14T06:58:28.000Z",
          "wordCount": 257,
          "title": "v1.14.4",
          "imageUrl": "https://opengraph.githubassets.com/9a7043530dac30c2f389b7a285822cfe3c2b54efc7d2cdc63a0735d3cc5095a2/osmoscraft/osmosfeed/releases/tag/v1.14.4"
        },
        {
          "id": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.14.3",
          "author": null,
          "description": "style tweak",
          "link": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.14.3",
          "publishedOn": "2022-02-14T06:29:16.000Z",
          "wordCount": 254,
          "title": "v1.14.3",
          "imageUrl": "https://repository-images.githubusercontent.com/312859305/30a63d00-a162-11eb-8a1d-a3167673e96a"
        },
        {
          "id": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.14.2",
          "author": null,
          "description": "New: Adjust article grouping based on timezone. You need to add timezone in osmosfeed.yml for accurate grouping. See details in documentation.\nNew: Card title now toggles card content\nNew: all toggles on the UI are persisted with local storage. You can use it to track read/unread status within a single browser.\nNew: Build timestamp now links to the GitHub Action run\nChanged: Sources are sorted based on publish time rather than alphabetical order\nChanged: Style adjusted for easier reading\nFixed: Horizontal overflow on Safari\nFixed: HTML syntax error in default template",
          "link": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.14.2",
          "publishedOn": "2022-02-14T05:53:33.000Z",
          "wordCount": 355,
          "title": "v1.14.2",
          "imageUrl": "https://opengraph.githubassets.com/3d1aa7f7484f74c258c25be470129b65acc359f03644040243b05803daae68aa/osmoscraft/osmosfeed/releases/tag/v1.14.2"
        },
        {
          "id": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.14.1",
          "author": null,
          "description": "git typo in gh run url",
          "link": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.14.1",
          "publishedOn": "2022-02-14T05:26:23.000Z",
          "wordCount": 258,
          "title": "v1.14.1",
          "imageUrl": "https://repository-images.githubusercontent.com/312859305/30a63d00-a162-11eb-8a1d-a3167673e96a"
        },
        {
          "id": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.14.0",
          "author": null,
          "description": "New: Adjust article grouping based on timezone. You need to add timezone in osmosfeed.yml for accurate grouping. See details in documentation.\nNew: Card title now toggles card content\nNew: all toggles on the UI are persisted with local storage. You can use it to track read/unread status within a single browser.\nNew: Build timestamp now links to the GitHub Action run\nChanged: Sources are sorted based on publish time rather than alphabetical order\nChanged: Style adjusted for easier reading\nFixed: Horizontal overflow on Safari\nFixed: HTML syntax error in default template",
          "link": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.14.0",
          "publishedOn": "2022-02-14T05:13:00.000Z",
          "wordCount": 398,
          "title": "v1.14.0: V1.14.0 (#79)",
          "imageUrl": "https://repository-images.githubusercontent.com/312859305/30a63d00-a162-11eb-8a1d-a3167673e96a"
        },
        {
          "id": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.13.0",
          "author": null,
          "description": "New: Thumbnail image display for each article\nNew: Improved color, spacing, and typography for easier reading\nNew: Click the date to toggle all accordions on that day. Ctrl + Click to toggle all accordions on the entire site.\nChanged: All sections are expanded by default\nChanged: Switched to vitest for easier testing\nFixed: Long string (e.g. URL) caused horizontal overflow\nThank you: @naari3, @tianheg",
          "link": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.13.0",
          "publishedOn": "2022-02-13T05:05:17.000Z",
          "wordCount": 339,
          "title": "v1.13.0",
          "imageUrl": "https://opengraph.githubassets.com/fc77c41c87b2cd4d8990f4c940e0ddf681667b6b6e4363b0f609861b7ae5b6d8/osmoscraft/osmosfeed/releases/tag/v1.13.0"
        },
        {
          "id": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.12.1",
          "author": null,
          "description": "Fixed: Future articles appeared in the feed\nFxied: Security vulnerability from axios\nThank you: @naari3",
          "link": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.12.1",
          "publishedOn": "2022-02-12T17:46:42.000Z",
          "wordCount": 268,
          "title": "v1.12.1",
          "imageUrl": "https://opengraph.githubassets.com/d69790a31f94b1adf743c58bae86b9754de6969cceb83f11b8fbeb28ab1ad632/osmoscraft/osmosfeed/releases/tag/v1.12.1"
        }
      ]
    },
    {
      "title": "ShanSan",
      "feedUrl": "https://shansan.top/rss2",
      "siteUrl": "https://yeshan333.github.io/",
      "articles": [
        {
          "id": "https://yeshan333.github.io/2022/02/26/profiling-flame-graph/",
          "author": null,
          "description": "<script src=\"/assets/js/APlayer.min.js\"",
          "link": "https://yeshan333.github.io/2022/02/26/profiling-flame-graph/",
          "publishedOn": "2022-02-26T22:54:38.000Z",
          "wordCount": 354,
          "title": "profiling & Flame Graphs",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "酷 壳 – CoolShell",
      "feedUrl": "https://coolshell.cn/feed",
      "siteUrl": "https://coolshell.cn",
      "articles": [
        {
          "id": "https://coolshell.cn/?p=22173",
          "author": "陈皓",
          "description": "写这篇文章的原因主要还是因为V2EX上的这个贴子，这个贴子中说—— “对接同事的接口，他定义的所有接口都是 post 请求，理由是 https 用 post 更...\n Read More  Read More\n“一把梭：REST API 全用 POST” first appeared on 酷 壳 - CoolShell.",
          "link": "https://coolshell.cn/articles/22173.html",
          "publishedOn": "2022-02-13T04:28:47.000Z",
          "wordCount": 1690,
          "title": "“一把梭：REST API 全用 POST”",
          "imageUrl": "https://coolshell.cn/wp-content/uploads/2022/02/http_method.png"
        },
        {
          "id": "https://coolshell.cn/?p=22157",
          "author": "陈皓",
          "description": "今天看到微博上有一个热点事件， 是一个关于某公司做的一个监控员工离职倾向的软件，从截图中可以看到员工访问招聘网站的次数，还有投递的简历以及搜索的关建词等等信息，...\n Read More  Read More\n谈谈公司对员工的监控 first appeared on 酷 壳 - CoolShell.",
          "link": "https://coolshell.cn/articles/22157.html",
          "publishedOn": "2022-02-12T07:50:06.000Z",
          "wordCount": 674,
          "title": "谈谈公司对员工的监控",
          "imageUrl": "https://coolshell.cn/wp-content/uploads/2022/02/monitoring.jpeg"
        }
      ]
    },
    {
      "title": "面向信仰编程",
      "feedUrl": "https://draveness.me/feed.xml",
      "siteUrl": "https://draveness.me/",
      "articles": []
    },
    {
      "title": "卡瓦邦噶！",
      "feedUrl": "https://www.kawabangga.com/feed",
      "siteUrl": "https://www.kawabangga.com",
      "articles": [
        {
          "id": "https://www.kawabangga.com/?p=4626",
          "author": "laixintao",
          "description": "今年没有在跨年的时候及时写完年终总结，是因为那天还在西安隔离。2021 年一整年依然是疫情肆虐，下半年在新加坡 […]\nContinue reading...\nThe post 2021 年年鉴 first appeared on 卡瓦邦噶！.\n\n相关文章:\n\n我在新加坡一个月的生活费明细\n为什么 Cloudflare 提供免费的服务？\nBuild 一个最小的 Redis Docker Image\n《Prometheus Up & Running》阅读\n使用 mtr 检查网络问题，以及注意事项",
          "link": "https://www.kawabangga.com/posts/4626",
          "publishedOn": "2022-02-25T16:24:42.000Z",
          "wordCount": 453,
          "title": "2021 年年鉴",
          "imageUrl": null
        }
      ]
    },
    {
      "title": "MoeLove",
      "feedUrl": "https://moelove.info/index.xml",
      "siteUrl": "https://moelove.info/",
      "articles": [
        {
          "id": "https://moelove.info/2022/03/06/K8S-%E7%94%9F%E6%80%81%E5%91%A8%E6%8A%A5-Knative-%E8%BF%9B%E5%85%A5-CNCF-%E5%AD%B5%E5%8C%96K8S-ingress-nginx-%E8%A7%A3%E5%86%B3%E5%A4%9A%E5%AE%9E%E4%BE%8B%E9%97%AE%E9%A2%98/",
          "author": "zhangjintao9020@gmail.com (张晋涛)",
          "description": "「K8S 生态周报」内容主要包含我所接触到的 K8S 生态相关的每周值得推荐的一些信息。欢迎订阅知乎专栏「k8s生态」。\nKubernetes ingress-nginx v1.1.2 发布\n就在今天 Kubernetes ingress-nginx 项目发布了 v1.1.2 版本。\n我是这个版本的 release manager 。\n距离上个版本发布有将近两个月了，我们来看看这个版本中值得关注的一些变更。\n在 #8221 中，我们对 ingress-nginx 的 Admission controller 的逻辑做了一些调整，\n主要是可以用来修正 自 v1.0 版本后，如果 Kubernetes 集群中同时运行多个 ingress-nginx 的话，在创建 Ingress 资源的时候，可能导致每个 ingres-nginx 的 Admission 都会去进行检查的问题。\n而该问题最大的影响是，如果创建的 Ingress 配置相同的话，则会被直接拒绝掉。\n在 #8253 中则是为 ingress-nginx 增加了一个 ssl_certificate_info 的 metric， 直接公开当前被加载的证书的信息。\n这个功能的最大的好处就是可以避免 Ingress controller Pod 加载了旧证书，进而导致客户端连接失败的问题。\n此外 #8256 是为了修正在 nginx.ingress.kubernetes.io/auth-url 中传递无效 URL 的问题，\n建议升级 。\n此外还有一些小的 bugfix 和优化，更多详细信息请参考 ReleaseNote 。\n在这次发布过程中还有一些比较有趣的事情，\n本次发布过程从时间线看，从我开始发布流程，到最后完成发布，共持续了一周的时间，由几个人异步协作完成。\n这跟往常差别还是比较大的，往常我们可能会约某个时间，同时在线一…",
          "link": "https://moelove.info/2022/03/06/K8S-%E7%94%9F%E6%80%81%E5%91%A8%E6%8A%A5-Knative-%E8%BF%9B%E5%85%A5-CNCF-%E5%AD%B5%E5%8C%96K8S-ingress-nginx-%E8%A7%A3%E5%86%B3%E5%A4%9A%E5%AE%9E%E4%BE%8B%E9%97%AE%E9%A2%98/",
          "publishedOn": "2022-03-06T15:39:51.000Z",
          "wordCount": 269,
          "title": "K8S 生态周报| Knative 进入 CNCF 孵化，K8S ingress-nginx 解决多实例问题",
          "imageUrl": "https://gitee.com/tlrr/awesome/raw/master/2020-9-9/1599632564572-mp-qrcode.png"
        },
        {
          "id": "https://moelove.info/2022/03/02/%E4%BA%91%E5%8E%9F%E7%94%9F%E7%AD%96%E7%95%A5%E5%BC%95%E6%93%8E-Kyverno-%E4%B8%8A/",
          "author": "zhangjintao9020@gmail.com (张晋涛)",
          "description": "大家好，我是张晋涛。\n在之前的 『K8S生态周报』 和 《搞懂 Kubernetes 准入控制（Admission Controller)》 等文章中，我曾提到过 Kyverno 这个云原生策略引擎项目，很多小伙伴在后台私信我说对这个项目比较感兴趣。这篇文章我们专门来聊聊 Kyverno 吧。\nKyverno 当前是一个 CNCF sandbox 级别的项目。\n\n本文的大纲如下，小伙伴们可自行跳跃到感兴趣的部分查阅。\n\nKubernetes 的策略\n我们称 Kyverno 是云原生策略引擎，那么 Kubernetes 中的策略是什么呢？\n对于 Kubernetes 中的策略，大家可能比较熟悉的是 PodSecurityPolicy。 不过 PodSecurityPolicy 自 Kubernetes v1.21 起已弃用，并将在 v1.25 中删除（当前版本是 v1.23 ）。当前建议大家迁移到 Kubernetes 新增的替换方案 Pod Security Admission 或者类似本文中介绍的 Kyverno 等这种第三方策略插件。\n其实无论是 PodSecurityPolicy 还是它的替代方案 Pod Security Admission ，甚至包括 Kyverno 等，它们都是构筑在 Kubernetes 的 Admission 机制之上的。\n首先，我们主要从两个角度来理解为什么我们需要准入控制器（Admission Controller）：\n从安全的角度\n比如，为避免攻击。需要对Kubernetes 集群中部署的镜像来源判定；\n比如，避免 Pod 使用 root 用户，或者尽量不开启特权容器等；\n从治理的角度\n比如，通过 admission controller 校验服务是否拥有必须的 label；\n比如，避免出现资源超卖等；\n下图，是 kube-apiser…",
          "link": "https://moelove.info/2022/03/02/%E4%BA%91%E5%8E%9F%E7%94%9F%E7%AD%96%E7%95%A5%E5%BC%95%E6%93%8E-Kyverno-%E4%B8%8A/",
          "publishedOn": "2022-03-02T13:39:12.000Z",
          "wordCount": 473,
          "title": "云原生策略引擎 Kyverno （上）",
          "imageUrl": "https://s2.loli.net/2022/03/03/KUYpoEOH9SFIdL3.png"
        },
        {
          "id": "https://moelove.info/2022/02/20/K8S-%E7%94%9F%E6%80%81%E5%91%A8%E6%8A%A5-containerd-v1.6-%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83%E5%B8%A6%E6%9D%A5%E4%BC%97%E5%A4%9A%E6%96%B0%E7%89%B9%E6%80%A7/",
          "author": "zhangjintao9020@gmail.com (张晋涛)",
          "description": "「K8S 生态周报」内容主要包含我所接触到的 K8S 生态相关的每周值得推荐的一些信息。欢迎订阅知乎专栏「k8s生态」。\ncontainerd v1.6.0 正式发布\ncontainerd v1.6 在本周也正式发布了，这是 containerd 的第 7 个大版本。距离上一个大的正式版 v1.5.0 已经过了将近 9 个月的时间（v1.5.0 是 2021 年 5 月发布的），关于 containerd v1.5.0 的主要变更，可参考我去年写的 K8S 生态周报| containerd v1.5.0-rc.0 发布。我们一起来看看 containerd v1.6.0 中有哪些值得关注的变更吧！\nRuntime\n#5744 在 containerd 的 metrics 接口中增加了 runtime 的 label;\n#6375 将 runc 的依赖升级到了 v1.1.0 版本；\n#5871 增加了 shim plugin 的支持，重构了 shim v2 来加载和注册 plugin;\nCRI\n#5619 当前会同时支持 CRI v1 和 v1alpha2 ；\n#6113 实现了新的 Kubernetes CRI pod sandbox stats API，这其实是为了遵守 Kubernetes 中 CRI 的变更。其根本原因实际上是在 Kubernetes 中希望能够增强 CRI 的能力，减少对 cAdvisor 的依赖。更深层次的则是由于 cAdvisor 仅支持 Linux 容器，和一般的容器运行时，无法支持类似 Kata Containers 这类 VM 运行时，以及不支持 Windows 容器。由此其实我们也可以看出来 Kubernetes & containerd 的一些目标，做的更通用，更标准化；\n#6111 添加了 sandbox 和 container 延迟…",
          "link": "https://moelove.info/2022/02/20/K8S-%E7%94%9F%E6%80%81%E5%91%A8%E6%8A%A5-containerd-v1.6-%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83%E5%B8%A6%E6%9D%A5%E4%BC%97%E5%A4%9A%E6%96%B0%E7%89%B9%E6%80%A7/",
          "publishedOn": "2022-02-20T12:55:03.000Z",
          "wordCount": 288,
          "title": "K8S 生态周报| containerd v1.6 正式发布，带来众多新特性",
          "imageUrl": "https://gitee.com/tlrr/awesome/raw/master/2020-9-9/1599632564572-mp-qrcode.png"
        },
        {
          "id": "https://moelove.info/2022/02/16/K8S-%E7%94%9F%E6%80%81%E5%91%A8%E6%8A%A5-Istio-%E5%8D%B3%E5%B0%86%E5%8F%91%E5%B8%83%E9%87%8D%E5%A4%A7%E5%AE%89%E5%85%A8%E6%9B%B4%E6%96%B0%E5%A4%9A%E4%B8%AA%E7%89%88%E6%9C%AC%E5%8F%97%E5%BD%B1%E5%93%8D/",
          "author": "zhangjintao9020@gmail.com (张晋涛)",
          "description": "「K8S 生态周报」内容主要包含我所接触到的 K8S 生态相关的每周值得推荐的一些信息。欢迎订阅知乎专栏「k8s生态」。\nIstio 即将发布重大安全更新，多个版本受影响\nIstio 产品安全工作组近期发现 Istio 中存在一些安全漏洞，其中 最高级别的漏洞被评级为高严重性。\n鉴于当前 Istio 的漏洞披露政策，所以目前我们不会透露具体的漏洞细节。\n在一周后的 2 月 22 日，将会发布 Istio v1.11.7、v1.12.3 和 v1.13.1 版本修正这些安全漏洞。届时会再更新漏洞的详细内容。\n请参考官方通告\n此外，本周 Istio 也发布了 v1.13.0 正式版， 在 v1.13.1 版本发布前，我不建议大家将自己所用的 Istio 升级到 v1.13.0 。\n虽然不建议现在升级，但我们也可以关注下 v1.13.0 带来的一些值得关注的变更：\nv1.13.0 版本中为东西向流量提供了基于主机名的多网络网关支持。主机名可以在控制面中被解析，解析记录可被用作 endpoint。\n如果你不需要这个行为，或者想要恢复到之前版本中的默认行为，可以为 istiod 添加 RESOLVE_HOSTNAME_GATEWAYS=false 的配置。\n此外，它还支持重写 gRPC 探针，以及通过 proxyMetadata 提供了在 Envoy 工作线程间的重平衡，并且通过学习 Kubernetes 的探测\n行为，改善了 istio-agent 健康检查的探测，这样它就不会再重用连接了。请参考 #36390 。\n同时我们会发现在这个版本中它对 Telemetry API 的支持增加了不少，尤其是它为 access log 支持了\nCommon Expression Language (CEL) filter 。如果你觉得对 CEL 有些陌生，那么你可以看下我之前的文章 《K8S…",
          "link": "https://moelove.info/2022/02/16/K8S-%E7%94%9F%E6%80%81%E5%91%A8%E6%8A%A5-Istio-%E5%8D%B3%E5%B0%86%E5%8F%91%E5%B8%83%E9%87%8D%E5%A4%A7%E5%AE%89%E5%85%A8%E6%9B%B4%E6%96%B0%E5%A4%9A%E4%B8%AA%E7%89%88%E6%9C%AC%E5%8F%97%E5%BD%B1%E5%93%8D/",
          "publishedOn": "2022-02-15T16:14:36.000Z",
          "wordCount": 413,
          "title": "K8S 生态周报| Istio 即将发布重大安全更新，多个版本受影响",
          "imageUrl": "https://gitee.com/tlrr/awesome/raw/master/2020-9-9/1599632564572-mp-qrcode.png"
        }
      ]
    },
    {
      "title": "CJ Ting's Blog",
      "feedUrl": "https://cjting.me/index.xml",
      "siteUrl": "https://cjting.me/",
      "articles": []
    },
    {
      "title": "codedump的网络日志 on codedump的网络日志",
      "feedUrl": "https://www.codedump.info/index.xml",
      "siteUrl": "https://www.codedump.info/",
      "articles": [
        {
          "id": "https://www.codedump.info/post/20220304-weekly-8/",
          "author": null,
          "description": "引言：写过不少技术文章，以及给不少技术思路手绘示例配图之后，在这方面有了一些心得，本文权当个人的一些的总结，抛砖引玉。\n技术配图的一些心得\n我觉得我们理工科出身的，对于可以量化的事情，总是很容易根据量化差异来做出判断，比如一个程序性能优化之后，能比优化之前快出多少，都能有一个量化的数字来说明。\n但是对于那些不能量化的东西，就很难说出具体好在哪里了。\n本文主题要讨论的“技术配图”就属于这种很难量化的领域，很难有一个标准来量化说明两幅图之间差别在哪里。我也是画了很多图，以及看了别人的很多配图之后，才慢慢有一些心得，本文权当个人的一些的总结，抛砖引玉。\n本文并不是一个画图工具的对比说明，尽管现在各种绘图工具已经很多，也各有自己的优缺点以及个人喜好，但是在这里并不讨论具体工具的使用，会把更多的文字放在配图的一些注意事项上。但是，也总有人问我文章的配图使用什么工具做的，在这里再回答一次：OmniGraffle，一款目前仅有Mac版本的工具软件。\n一图胜千言\n在开始交代具体的配图注意事项之前，有必要先说说配图的重要性。\n绘图，某种程度也是辅助自己思考某个技术点的手段之一，以我个人的体会来说，有时候讲不清楚一个技术点的时候，就手绘图出来，比朴素的文字更容易说明问题。其中的原因，有可能是：图片可以有多维的信息，而文字通常只有一维，遇到文字表达能力不太好的人，这仅有的一维能力可能还不好发挥出来。\n所以，在交代技术细节、沟通交流的时候，尽量多画图。反向的，图画多了，也自然慢慢会找到感觉，如何更好的通过图示表达思路。\n顺便一提，还有比朴素的文字表达更差的技术沟通方式，就是简单粗暴的贴一大段代码上去。这种做法，其实更多时候是没有对作者的思路有太多个人的整理，想偷懒的方式，最后回头再看写过的文字，可能连自己都看不懂了。\n个人的一个体会：如果产出某些输出的时候，能假设自己未来就是这些输出的读者、维护者…",
          "link": "https://www.codedump.info/post/20220304-weekly-8/",
          "publishedOn": "2022-03-04T14:10:11.000Z",
          "wordCount": 234,
          "title": "周刊（第8期）：技术配图的一些心得",
          "imageUrl": null
        },
        {
          "id": "https://www.codedump.info/post/20220227-weekly-7/",
          "author": null,
          "description": "引言：在工作里使用Rust已经有两个多月的时间了，谈谈我做为一名多年的C系（C、C++）程序员，对Rust的初体验。\n一个C系程序员的Rust初体验\n最近由于工作的原因，使用上了Rust语言，在此之前我有多年的C、C++编码经验（以下将C、C++简称C系语言）。\n使用C系语言编码时，最经常面对的问题就是内存问题，诸如：\n野指针（Wild Pointer）：使用了不可知的指针变量，如已经被释放、未初始化、随机，等等。\n内存地址由于访问越界等原因被覆盖（overflow），这不但是可能出错的问题，还有可能成为程序的内存漏洞被利用。\n内存分配后未回收。\n连Chrome的报告都指出，Chrome中大约70%的安全漏洞都是内存问题，见：Memory safety。（不仅如此，微软的文章也显示在微软的产品中70%的安全漏洞也是内存问题，见：Microsoft: 70 percent of all security bugs are memory safety issues | ZDNet）\nC系语言发展到今天，已经有不少可以用于内存问题检测的利器了，其中最好用的莫过于AddressSanitizer，它的原理是在编译时给程序加上一些信息，一旦发生内存越界访问、野指针等错误都会自动检测出来。\n但是即便有这些工具，内存问题也不好解决，其核心的原因在于：这些问题绝大部分都是运行时（Runtime）问题，即要在程序跑到特定场景的时候才会暴露出来，诸如上面提到的AddressSanitizer就是这样。\n都知道解决问题的第一步是能复现问题，而如果一个问题是运行时问题，这就意味着：复现问题可能会是一件很麻烦的事情，有时候还可能到生产环境去复现。\n以我之前经历的一个Bug来看这类工作的复杂度，见线上存储服务崩溃问题分析记录 - codedump的网络日志，这是一个很典型的发生在生产环境上由于内存错误…",
          "link": "https://www.codedump.info/post/20220227-weekly-7/",
          "publishedOn": "2022-02-27T03:25:33.000Z",
          "wordCount": 222,
          "title": "周刊（第7期）：一个C系程序员的Rust初体验",
          "imageUrl": null
        },
        {
          "id": "https://www.codedump.info/post/20220220-weekly-6/",
          "author": null,
          "description": "引言：从2021年9月份开始要探索生产级btree存储引擎的实现，到2022年2月整理完毕发布《sqlite 3.36 btree实现解析》的系列文章，我花费了小半年的时间，本期会聊聊整个过程下来我的一些想法。\n《sqlite 3.36 btree实现解析》番外篇\n时间回到2021年9月份。彼时，因为工作的关系，要研究一下生产级btree存储引擎的实现，在此之前我大体对btree、b+tree的数据结构和算法有个了解，见：\nB树、B+树索引算法原理（上） - codedump的网络日志\nB树、B+树索引算法原理（下） - codedump的网络日志\n但是，一个生产级的产品，对比教科书的示范型代码，还是有很大的区别的，具体来说，我当时不明白以下这些生产级存储引擎的问题如何解决：\n如何存储变长的数据？\n如何存储数据大小超过一个物理页面的数据？\n如何利用被回收的空间？\n如何处理崩溃恢复？\n读写并发如何处理？\n…\n为了解答这些疑问，先后去翻阅InnodDB、WiredTiger、sqlite的文档，但是这些项目代码量都太大了，以我当时的程度，无法马上找到很具体的解答。\n事情的突破在从网上查找文章时看到的这一篇文章：How Database B-Tree Indexing Works - DZone Database，这是一篇解释btree工作原理的文章，这篇文章同时还列出了一个项目：madushadhanushka/simple-sqlite: Code reading for sqlite backend，这个项目的作者，将sqlite2.5版本中btree的实现，单独抽取出来形成了一个独立的KV库，可以编译通过使用。\n看到这个项目的时候，我的感觉就是如获至宝，因为虽然只有几千行的代码量，但是解答了很多上面提到的疑问，“麻雀虽小五脏俱全”，我花了几天的时间整体阅读了解了原理，这个…",
          "link": "https://www.codedump.info/post/20220220-weekly-6/",
          "publishedOn": "2022-02-20T02:53:41.000Z",
          "wordCount": 399,
          "title": "周刊（第6期）：《sqlite 3.36 btree实现解析》番外篇",
          "imageUrl": null
        },
        {
          "id": "https://www.codedump.info/post/20220211-weekly-5/",
          "author": null,
          "description": "引言：本期介绍时序数据库的存储模型，只有理解了时序数据的存储模型，才能更好的了解时序数据库的优缺点以及其适用场景。\n从存储模型聊一聊时序数据库的应用场景\n想写本文，是因为看到了知乎上的一篇文章：投资数据库领域：2021年总结（NoSQL、图、时序） - 知乎，里面谈到了时序数据库：\n但缺陷是实际的市场空间较小。跟通用型数据库，尤其是OLAP数据库相比，时序数据库最大的差异点在于对于时间维度建立了独特的索引与优化，而其他所谓schemaless等特性在OLAP数据库上都能做到，不存在技术障碍。这也就是为什么其实在公司做时序场景的数据库选型的时候会直接将时序数据库与一些OLAP数据库（比如ClickHouse）做比较。如果要把时序数据库往更宽的场景发展，那就是想好如何与那么多的通用型数据库做竞争了。\n由于之前有过短暂一段时间的时序数据库从业经历，所以想从我的理解聊聊时序数据库的应用场景。\n要了解应用场景，需要首先对时序数据库的存储模型有个大概的了解，在下文中我尽量不涉及到太艰深的技术术语来描述我的理解。由于我从业时序数据库的时间并不长，所以有可能理解会有偏差。\n何谓“时序数据（time-series data）”？就我个人粗浅的理解，就是任何一定会带上时间戳（timestamp）维度的数据。日常生活里，在微博、微信等社交媒体的发现就可以理解时序数据，因为它们肯定都有一个发言时间，所以有时候会把个人看到的微博等称为“时间线（timeline）”。对应到工业领域，比如一个电表每小时上报的用电量也是时序数据，比如服务器监控时每隔15分钟采集的性能数据也是时序数据。\n由于时序数据天然有“时间“这个维度，为了更好的优化其写入性能，通常专门存储时序数据的存储引擎会按照时间分块、按列来存储数据，如下图：\n\n\n\n上图中，演示用的数据格式有三列：\n时间戳。\nA指标。\nB指标。\n通常，时序数据库存…",
          "link": "https://www.codedump.info/post/20220211-weekly-5/",
          "publishedOn": "2022-02-11T14:27:57.000Z",
          "wordCount": 267,
          "title": "周刊（第5期）：从存储模型聊一聊时序数据库的应用场景",
          "imageUrl": null
        }
      ]
    }
  ],
  "cliVersion": "1.14.4"
}