{
  "sources": [
    {
      "title": "Release notes from osmosfeed",
      "feedUrl": "https://github.com/osmoscraft/osmosfeed/releases.atom",
      "siteUrl": "https://github.com/osmoscraft/osmosfeed/releases",
      "articles": [
        {
          "id": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.12.0",
          "author": null,
          "description": "New: When one of the sources download fails, fall back to cache and continue rest of the build.\nChore: Dependency updates\nAdded docs for Netlify deployment\nFixed #71 #69 #65\nThank you: @sokomin, @molakirlee, @philippnagel, @tianheg",
          "link": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.12.0",
          "publishedOn": "2022-01-10T05:25:18.000Z",
          "wordCount": 310,
          "title": "v1.12.0"
        }
      ]
    },
    {
      "title": "ShanSan",
      "feedUrl": "https://shansan.top/rss2",
      "siteUrl": "https://yeshan333.github.io/",
      "articles": [
        {
          "id": "https://yeshan333.github.io/2022/01/31/fsm-smr-dfsm/",
          "author": null,
          "description": "<script src=\"/assets/js/APlayer.min.js\"",
          "link": "https://yeshan333.github.io/2022/01/31/fsm-smr-dfsm/",
          "publishedOn": "2022-01-31T17:32:51.000Z",
          "wordCount": 362,
          "title": "状态机的一点儿事（fsm-smr-dfsm）"
        }
      ]
    },
    {
      "title": "酷 壳 – CoolShell",
      "feedUrl": "https://coolshell.cn/feed",
      "siteUrl": "https://coolshell.cn",
      "articles": []
    },
    {
      "title": "面向信仰编程",
      "feedUrl": "https://draveness.me/feed.xml",
      "siteUrl": "https://draveness.me/",
      "articles": []
    },
    {
      "title": "卡瓦邦噶！",
      "feedUrl": "https://www.kawabangga.com/feed",
      "siteUrl": "https://www.kawabangga.com",
      "articles": []
    },
    {
      "title": "MoeLove",
      "feedUrl": "https://moelove.info/index.xml",
      "siteUrl": "https://moelove.info/",
      "articles": [
        {
          "id": "https://moelove.info/2022/01/06/K8S-%E7%94%9F%E6%80%81%E5%91%A8%E6%8A%A5-2021-%E5%9B%9E%E9%A1%BE%E5%92%8C-2022-%E5%B1%95%E6%9C%9B/",
          "author": "zhangjintao9020@gmail.com (张晋涛)",
          "description": "「K8S 生态周报」内容主要包含我所接触到的 K8S 生态相关的每周值得推荐的一些信息。欢迎订阅知乎专栏「k8s生态」。\n大家好，我是张晋涛。\n2021 年已经结束了，我们来对 Kubernetes 及相关生态做个回顾和总结。\nKubernetes 的 2021\n从 2021 年的 4 月份开始， Kubernetes 的发版节奏由原先的每 3 个月发布一个版本，修改成了每 4 个月发布一个版本。所以在 2021 年，Kubernetes 一共发布了 3 个大版本。包括 v1.21、v1.22 和 v1.23 。\n从整体的功能上而言，主要侧重在以下的几个方面。\n资源利用\n内存管理器（kubelet）\n在 Kubernetes v1.21 中在 kubelet 组件生态中新增了一个 内存管理器 ，在 Linux 系统中，为需要保证 QoS 的 Pod 在多 NUMA 节点保障内存和大内存页分配。这个特性非常有用，尤其是当数据库类或者使用 DPDK 进行高性能数据包处理的应用要部署到 Kubernetes 中时，内存对其性能影响至关重要。\n这里稍微聊点和 NUMA 相关的内容。简单来说就是在多 NUMA 结构下，为了保证效率，所以会按内存和 CPU 的相对距离来按 node 定义是否为 local memory 或者说本地内存，同时由于实际位置不同，所以就可能会产生内存分配不均匀的情况了。比如，我们可以使用 numactl 管理工具查看下当前机器上的情况：\n[tao@moelove ~]# numactl -H\navailable: 2 nodes (0-1)\nnode 0 cpus: 0 1 2 3 4 5 6 7 8 9 20 21 22 23 24 25 26 27 28 29\nnode 0 size: 65186 MB\nnode 0 free: 9769 MB\nnode…",
          "link": "https://moelove.info/2022/01/06/K8S-%E7%94%9F%E6%80%81%E5%91%A8%E6%8A%A5-2021-%E5%9B%9E%E9%A1%BE%E5%92%8C-2022-%E5%B1%95%E6%9C%9B/",
          "publishedOn": "2022-01-06T11:18:41.000Z",
          "wordCount": 666,
          "title": "K8S 生态周报| 2021 回顾和 2022 展望"
        }
      ]
    },
    {
      "title": "CJ Ting's Blog",
      "feedUrl": "https://cjting.me/index.xml",
      "siteUrl": "https://cjting.me/",
      "articles": []
    },
    {
      "title": "codedump的网络日志 on codedump的网络日志",
      "feedUrl": "https://www.codedump.info/index.xml",
      "siteUrl": "https://www.codedump.info/",
      "articles": [
        {
          "id": "https://www.codedump.info/post/20220129-weekly-3/",
          "author": null,
          "description": "引言：在我之前的工作里，因为各种原因，断续在游戏行业里有过总共大概四年左右的从业时间，今天想从我的视角聊聊游戏行业后端开发相关的技术，供那些想在这个行业从业，尤其是后端开发从业人员一些参考。\n一个前游戏开发者眼中的游戏后端技术\n由于我从业的方向都是后端开发，所以这里仅谈论游戏开发后端的技术。\n游戏本质是个内容行业，所以游戏开发时相当一部分工作内容，就是不停的更新新的内容出来给玩家消费。这些内容包括但不限于：新的英雄、技能、玩法，等等。\n而要支撑这些玩法，相当一部分是策划的配表数据，即：\n程序员把玩法的框架、逻辑搭建好，留出读玩法数据的接口来。\n玩法数据由负责该玩法的策划来配表实现。\n这其实就是很朴素的“表驱动”的编程方式。\n因为这个原因，所以游戏服务器启动时，要加载相当多的数据，主要有：\n玩家的数据，包括账号、角色、帮派、金钱等数据。\n玩法相关的策划配表数据。比如一个场景的坐标位置、NPC的坐标位置、任务，等等。\n由于需要在启动的时候要加载很多数据，游戏服务器才能完成初始化，所以“编译型”语言在游戏开发里并不适用来编写游戏玩法逻辑，试想下面的开发场景：\n策划提出了新的玩法需求。\n开发使用如C++这样的编译型语言编码实现玩法。\n编译新修改的代码：这里面有包括了编译、修改编译不通过时候的报错，等等。\n停止服务器，重启服务器来验证玩法的逻辑。\n可以看到，姑且不论其他因素，单是每次验证代码修改时需要停服、重启服务器的流程，而重启时又要加载一堆数据才能完成初始化，这个过程就严重影响开发效率。\n换言之，“编译型”语言并不适合于用来编码在游戏开发里需要经常变更的玩法逻辑。\n于是，一种新的开发架构出现了，见下图。\n\n\n\n在图中，将游戏服务器架构分为了两层：\n引擎层：这部分由C++编码，实现了游戏开发中与具体逻辑关系不大、且不太会变更的部分，如网络数据收发、数据库访问，等等。\n脚本层：这部分…",
          "link": "https://www.codedump.info/post/20220129-weekly-3/",
          "publishedOn": "2022-01-29T06:21:20.000Z",
          "wordCount": 378,
          "title": "周刊（第3期）：一个前游戏开发者眼中的游戏后端技术"
        },
        {
          "id": "https://www.codedump.info/post/20220123-weekly-2/",
          "author": null,
          "description": "从笔记软件谈被体制化\n前两周，一则收购消息，在偌大的中文互联网上，几乎没有掀起任何的讨论：\n为知笔记并入 ONES，WizNote X 迎来新的征程\n我是为知笔记的老用户了，从 2011 年就开始使用为知笔记，即便是现在不怎么使用的情况下，也已经把 VIP 会员续费到了 2024 年。在我看来，为知笔记是一个气质与众不同的互联网产品：\n在互联网上几乎没看到这款产品主动来宣传自己，都是靠用户的口碑传播，最开始我也是通过用户的介绍知道这款产品的。\n是最早支持 Markdown 的笔记本软件，这在我最开始了解 MD 并且开始用这个格式来记录笔记时起了很大的帮助。\n价格良心。\n所以，当看到为知笔记被收购的新闻，心情还是有些复杂的。我大体知道一些互联网产品的玩法，知道为知笔记应该生存的不太好，被收购了也许对团队是个好事。\n于是，我开始回想起来，到底是什么样的契机，让我开始慢慢抛弃了传统的笔记软件，以及我现在都用什么方式记录笔记。\n在 Evernote 刚出来的时候，多端可用、可以收藏文章、记录自己的笔记等等，我也大概是那时候开始记录笔记的，然后就是后来使用网易云笔记，再到主力使用为知笔记。\n让我逐渐意识到不应该把笔记托管到笔记软件上，有那么几个原因：\n笔记软件之间竞争激烈，可能你从 A 家换到 B 家的产品时，数据的迁移是个大问题，有时候就不得不丢掉一部分难迁移的数据。比如把数据从 Evernote 迁移出来就很麻烦，还好我之前放在这里的笔记也不太用得上了。\n\n\n\nMarkdown 格式开始流行以后。\n\n\n\n我大概是从2015年开始用MD格式开始写笔记的，这种格式马上就让我爱上了记录笔记：\n格式对比LaTex来说太简单了，只有常见的几种格式，易学易写。\n纯文本格式，这意味着用任何文本编辑器就能打开。\n搭配好用的编辑器，能获得”所见即所得“的体验。\n由此，我开始反思之前对笔记本软件的使…",
          "link": "https://www.codedump.info/post/20220123-weekly-2/",
          "publishedOn": "2022-01-23T07:38:31.000Z",
          "wordCount": 225,
          "title": "周刊（第2期）：从笔记软件谈被体制化"
        },
        {
          "id": "https://www.codedump.info/post/20220116-weekly-1/",
          "author": null,
          "description": "为什么会写周刊\n我为写周刊这个事情思考了小一阵子。\n列举了好几个优点和缺点。比如，优点有能以输出来倒逼自己的输入，缺点有我的积累是否能够足以支撑我每周写一点东西，以及这种有明确时间限制的输出，是否会给我带来心智负担，等等。再比如，以往的博客内容都是很“硬”的技术内容，周刊不可能也不会每周都更新硬技术文章，会不会导致读者群有点分裂。\n思考到最后，我还是决定写周刊。\n从去年开始远程工作，大部分时间都在家里。由于我又很宅，网购也足够的发达，这又让我更宅了。然而，“物理”意义上的活动范围变小，并不意味着“逻辑”上能触达的范围也变小了，实际情况是，由于把通勤时间节省下来，我有更多时间看书、跑步了。所以，我需要一种方式，能输出我看到的一些东西，来与外界发生交流。\n我在微博上看到了这么两句话，也反向让我坚定了这么做的意义。\n（宋一松SYS的微博）\n社交媒体在我看来最大的价值：它是最开放的peer review system\n硅谷王川的微博\n让读书产生好处的最简单办法是，一旦有灵感和想法之后，马上写出来，公开发布在社交媒体上，即使不成熟也没关系。写的过程也是自己深度思考的一个步骤，外人的有价值评论可帮你不断推敲，或给你带来新的线索，积累多了自然会出深刻的洞见。一个人孤立封闭的傻读写笔记，很难迅速提高思考深度。\n周刊于我的意义，就是能定期把自己想到、看到的事情都公开出去，反向的让自己定期整理、输出，这是我突破“物理”界限和人交流的手段之一。内容将会以自己的一些想法、业界的动态、推荐、读书、影视等为准，与我写的其他技术文章相比，不会这么“硬”。\n另外，写周刊还有一个好处，之前有很多想法、念头会散落在各种社交平台这样的新媒体上，实际对整理、汇总、索引等也不好，把念头汇之于文章，用这种更老式的传播方式可以更好得记录下来。\n数字化生活数据\n既然谈到了周刊做为个人对外输出的一个手段，我就想起最近几年一…",
          "link": "https://www.codedump.info/post/20220116-weekly-1/",
          "publishedOn": "2022-01-16T02:00:54.000Z",
          "wordCount": 277,
          "title": "周刊第1期：开刊，数字化生活数据"
        }
      ]
    }
  ],
  "cliVersion": "1.12.0"
}