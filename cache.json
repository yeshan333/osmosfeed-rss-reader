{
  "sources": [
    {
      "title": "Release notes from osmosfeed",
      "feedUrl": "https://github.com/osmoscraft/osmosfeed/releases.atom",
      "siteUrl": "https://github.com/osmoscraft/osmosfeed/releases",
      "articles": [
        {
          "id": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.11.0",
          "author": null,
          "description": "Added: support an experimental template for YouTube feed 📺 Demo | Source\n\nAggregate content from any YouTube channel rss url https://www.youtube.com/feeds/videos.xml?channel_id=<replace_with_channel_id>\nVideos are embedded via iframe and loading accelerated by youtube-lite-embed\nAds are reduced thanks to YouTube's policy for embedded videos 🙃\nWorks on mobile devices with butter smooth horizontal scroll.\nCaveat: the template works only with YouTube content. You cannot mix textual RSS feed or other video sources such as Vimeo.\nChanged: Default HTML template meta tag adjusted to match convention\nChanged: sources in template data is now ordered by last update timestamp (as opposed to alphabetical)\nThank you @PiyushLosalka",
          "link": "https://github.com/osmoscraft/osmosfeed/releases/tag/v1.11.0",
          "publishedOn": "2021-06-23T05:57:59.000Z",
          "wordCount": 370,
          "title": "v1.11.0"
        }
      ]
    },
    {
      "title": "ShanSan",
      "feedUrl": "https://shansan.top/rss2",
      "siteUrl": "https://yeshan333.github.io/",
      "articles": [
        {
          "id": "https://yeshan333.github.io/2021/07/10/checksum-gpg-tools/",
          "author": null,
          "description": "前言\n之前装软件一直都没有验证安装文件的习惯，信息安全意识不高，碰巧最近没啥事，微微写篇文章记录下校验工具（互联网http、https、ftp 服务并没有那么安全，是可以被劫持篡改。老装软件选手了，是该养成个校验文件的习惯了）。\n在互联网下载软件/文件的时候经常会看到官方提供了一段⌈校验和（checksum）⌋或包含校验和的文件供校验。常见的校验和有 md5、SHA 家族等。还有部分软件/文件会提供 GPG 校验文件（signature file, SIG）给下载者进行校验。\n来看看这两种校验方式相关的工具。",
          "link": "https://yeshan333.github.io/2021/07/10/checksum-gpg-tools/",
          "publishedOn": "2021-07-10T18:23:57.000Z",
          "wordCount": 1338,
          "title": "对下载软件/文件进行校验的工具（Checksum and GPG）"
        },
        {
          "id": "https://yeshan333.github.io/2021/06/29/osmosfeed-rss-reader/",
          "author": null,
          "description": "之前一直用 App Store 上的一个 RSS 阅读器 RSS Reader Prime 订阅技术周刊和 dalao 的技术博客，不得不说挺好用的，奈何全线下架了，现在就平板上保留着这个 App，手机上没有（国区好用的 RSS 阅读器基本无了）。有时候又想着用手机读读技术文章（板子太大，不好拿），于是乎翻了下 GitHub rss-reader topic 下的相关阅读器项目，挑了手基于 Web 和 GitHub Pages 的 RSS 阅读器（Web 才是真的“跨端”，2333~），水篇文章微微记录下。",
          "link": "https://yeshan333.github.io/2021/06/29/osmosfeed-rss-reader/",
          "publishedOn": "2021-06-29T15:34:20.000Z",
          "wordCount": 246,
          "title": "使用 osmosfeed 创建自己的 Web RSS 阅读器"
        }
      ]
    },
    {
      "title": "酷 壳 – CoolShell",
      "feedUrl": "https://coolshell.cn/feed",
      "siteUrl": "https://coolshell.cn",
      "articles": []
    },
    {
      "title": "面向信仰编程",
      "feedUrl": "https://draveness.me/feed.xml",
      "siteUrl": "https://draveness.me/",
      "articles": [
        {
          "id": "https://draveness.me//papers-segcache",
          "author": null,
          "description": "",
          "link": "https://draveness.me//papers-segcache",
          "publishedOn": "2021-07-12T00:00:00.000Z",
          "wordCount": 150,
          "title": "如何提高缓存系统的内存利用率和可扩展性 · NSDI '21"
        }
      ]
    },
    {
      "title": "卡瓦邦噶！",
      "feedUrl": "https://www.kawabangga.com/feed",
      "siteUrl": "https://www.kawabangga.com",
      "articles": [
        {
          "id": "https://www.kawabangga.com/?p=4392",
          "author": "laixintao",
          "description": "最近经历了人生的低谷。原因是在重构一些 Ansible 的部署脚本，Ansible 是本着声明式的理念世界的， […]\nContinue reading...\nThe post 警惕复用的陷阱 first appeared on 卡瓦邦噶！.\n\n相关文章:\n\n坑爹的部署脚本\n开始用 Ansible 管理机器了\n关于\nSRE&Devops 每周分享 Issue #5\nSRE&Devops 每周分享 Issue #3",
          "link": "https://www.kawabangga.com/posts/4392",
          "publishedOn": "2021-07-08T13:49:51.000Z",
          "wordCount": 856,
          "title": "警惕复用的陷阱"
        },
        {
          "id": "https://www.kawabangga.com/?p=4373",
          "author": "laixintao",
          "description": "之前在博客介绍了 Linux From Scratch, 最近发现 LFS 已经有新的版本 10.1 了，周末 […]\nContinue reading...\nThe post 开源软件源码编译指南 first appeared on 卡瓦邦噶！.\n\n相关文章:\n\n珍藏资料\n编译LFS的一些经验\n如何杀死一个进程？\n/bin /usr/bin 和 /usr/local/bin 的故事\nSRE&Devops 每周分享 Issue #3",
          "link": "https://www.kawabangga.com/posts/4373",
          "publishedOn": "2021-07-02T17:09:35.000Z",
          "wordCount": 2822,
          "title": "开源软件源码编译指南"
        },
        {
          "id": "https://www.kawabangga.com/?p=4361",
          "author": "laixintao",
          "description": "在我的博客切换到 Cloudflare 的 CDN 上之后，我发现速度快的惊人，原来 18s 才能加载完首页的 […]\nContinue reading...\nThe post 为什么 Cloudflare 提供免费的服务？ first appeared on 卡瓦邦噶！.\n\n相关文章:\n\n欧格玛教会与言论自由\n博客迁移到 Cloudflare\nDNS 解析的原理\n最近的工作感悟\nFirefox Setup",
          "link": "https://www.kawabangga.com/posts/4361",
          "publishedOn": "2021-07-01T14:39:58.000Z",
          "wordCount": 476,
          "title": "为什么 Cloudflare 提供免费的服务？"
        },
        {
          "id": "https://www.kawabangga.com/?p=4331",
          "author": "laixintao",
          "description": "周末收到邮件通知，说博客的流量马上要用完了。发现博客的访问量变高了许多，另外我将博客首页展示了最近的 5 篇文 […]\nContinue reading...\nThe post 博客迁移到 Cloudflare first appeared on 卡瓦邦噶！.\n\n相关文章:\n\n为什么 Cloudflare 提供免费的服务？\n欧格玛教会与言论自由\nDNS 解析的原理\n最近的工作感悟\nFirefox Setup",
          "link": "https://www.kawabangga.com/posts/4331",
          "publishedOn": "2021-06-27T07:42:08.000Z",
          "wordCount": 980,
          "title": "博客迁移到 Cloudflare"
        },
        {
          "id": "https://www.kawabangga.com/?p=4294",
          "author": "laixintao",
          "description": "我在 Shopee 维护一个 Service Mesh 系统，大部分的 RPC 调用要经过这个系统，这个系统每 […]\nContinue reading...\nThe post 最近的工作感悟 first appeared on 卡瓦邦噶！.\n\n相关文章:\n\nJoin Shopee & Work with Me!\n2020年的总结\nGitlab自动部署方案（Systemd+nc）\nJ2EE概念介绍\n分布式定时任务的重复执行问题",
          "link": "https://www.kawabangga.com/posts/4294",
          "publishedOn": "2021-06-23T17:48:21.000Z",
          "wordCount": 928,
          "title": "最近的工作感悟"
        },
        {
          "id": "https://www.kawabangga.com/?p=4284",
          "author": "laixintao",
          "description": "Latency （延迟）是我们在监控线上的组件运行情况的一个非常重要的指标，它可以告诉我们请求在多少时间内完成 […]\nContinue reading...\nThe post P99 是如何计算的 first appeared on 卡瓦邦噶！.\n\n相关文章:\n\n使用 mtr 检查网络问题，以及注意事项\n程序员应该知道的时间概念\nRedis RESP3 的一些想法",
          "link": "https://www.kawabangga.com/posts/4284",
          "publishedOn": "2021-06-18T13:55:08.000Z",
          "wordCount": 662,
          "title": "P99 是如何计算的"
        }
      ]
    },
    {
      "title": "MoeLove",
      "feedUrl": "https://moelove.info/index.xml",
      "siteUrl": "https://moelove.info/",
      "articles": [
        {
          "id": "https://moelove.info/2021/07/02/Redis-%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8BK8S-%E5%B9%B6%E9%9D%9E%E5%94%AF%E4%B8%80/",
          "author": "zhangjintao9020@gmail.com (张晋涛)",
          "description": "本文根据我在〖deeplus直播第247期〗线上分享演讲内容整理而成。\n今天将分享的内容分为以下4个方面：\n一、缘起\n二、介绍多样的容器化技术\n三、Redis介绍\n四、Redis容器化方案的对比\n一、缘起\n首先我们先聊一下为什么今天我会分享这个主题。我和朋友一起组织了一个 Redis技术交流群，到现在已经经营了6年左右的时间，其中某一天在群里有一个小伙伴就抛出来一个问题：\n\n他问大家线上的Redis有没有使用Docker安装？Docker使用Host的网络模式、磁盘使用本地挂载模式这种方案怎么样？这里的话我们暂时先不说这个方案如何，因为在今天的分享之后，我相信大家对于这个方案应该会有一个更清晰的认识和评价。\n二、介绍多样的容器化技术\n1、chroot和jails\n在容器化技术方面，其实历史很久远了。虽然我们现在用的容器化技术，或者说 k8s，还有云原生的概念是近几年才火起来的，但是实际上就容器化技术的发展来说，其实是很早的了。比如说最早的时候来自chroot，chroot大家可能都用过，或者都有了解过，在1979年的时候它是来自Unix，它主要的功能是可以修改进程和子进程的/。\n通过使用chroot达到什么样效果呢？使用chroot加某一个目录，然后再启动一个进程，那么这个进程自己所看到的 / ,就是我们平时所说的 / 目录，这个 / 就会是我们刚才指定的文件夹，或者说刚才指定的路径。这样子的话可以有效的保护我们操作系统上面的一些文件，或者说权限和安全相关的东西。\n在2000年的时候，出现了一个新的技术，叫做jails，其实它已经具备了sandbox，就是沙箱环境的雏形。使用jails的话，可以让一个进程或者说创建的环境拥有独立的网络接口和IP地址，而当我们提到使用jails的话，我们肯定会想到一个问题，就是如果你有了独立的网络接口和IP地址，这样的话就不能发原始的套接字，…",
          "link": "https://moelove.info/2021/07/02/Redis-%E5%AE%B9%E5%99%A8%E5%8C%96%E6%8A%80%E6%9C%AF%E9%80%89%E5%9E%8BK8S-%E5%B9%B6%E9%9D%9E%E5%94%AF%E4%B8%80/",
          "publishedOn": "2021-07-02T04:39:40.000Z",
          "wordCount": 190,
          "title": "Redis 容器化技术选型，K8S 并非唯一"
        },
        {
          "id": "https://moelove.info/2021/06/27/K8S-%E7%94%9F%E6%80%81%E5%91%A8%E6%8A%A5-Kubernetes-v1.22.0-beta.0-%E5%8F%91%E5%B8%83/",
          "author": "zhangjintao9020@gmail.com (张晋涛)",
          "description": "「K8S 生态周报」内容主要包含我所接触到的 K8S 生态相关的每周值得推荐的一些信息。欢迎订阅知乎专栏「k8s生态」。\nrunc v1.0 正式发布\n从 2016 年 6 月发布 v1.0-rc1 版本开始，至今已整整 5 年时间，runc 历经多个 rc 版本终于发布了 v1.0 版本。整个过程及其思考请参考我之前的文章 《开源项目的 5 年长跑，runc v1.0 终于正式发布！》 。这里我们来看看 v1.0 新版本中带来了哪些值得注意的变更。\n破化性变更\n#2999 删除了 libcontainer/configs.Device* 标识，请使用 libcontainer/devices.* 来替代（是自 v1.0-rc94 开始废弃的）；\n#2999 删除了 libcontainer/system.RunningInUserNS 函数，请使用 libcontainer/userns.RunningInUserNS 函数代替（同样是自 v1.0-rc94 开始废弃的）；\n改进\n#2994 在 runc update 的时候设置了 SkipDevices ，所以在此期间我们就不会更新 cgroups 了；\n#3010 cgroup1 相关的 blkio 支持 BFQ weight 了，这里需要注意的是 2018 年 CFQ 已经从 Linux 删除，22019 年发布的 RHEL 8.0 和 Ubuntu 19.01 等发行版中也均使用 BFQ 替代了 CFQ 。关于 Linux 内核的 BFQ 和 CFQ 这里就不再展开了，只需要知道 BFQ 相比 CFQ 做到了低延迟和吞吐即可；\n更多关于此版本的变更，请参考其 ReleaseNote ，现在 Docker/containerd 等项目已将 runc 依赖升级到了 v1.0 ，K8S 项目尚未合并。\nPromethe…",
          "link": "https://moelove.info/2021/06/27/K8S-%E7%94%9F%E6%80%81%E5%91%A8%E6%8A%A5-Kubernetes-v1.22.0-beta.0-%E5%8F%91%E5%B8%83/",
          "publishedOn": "2021-06-26T21:52:12.000Z",
          "wordCount": 349,
          "title": "K8S 生态周报| Kubernetes v1.22.0-beta.0 发布"
        },
        {
          "id": "https://moelove.info/2021/06/25/%E6%9B%B4%E4%BC%98%E9%9B%85%E7%9A%84-Kubernetes-%E9%9B%86%E7%BE%A4%E4%BA%8B%E4%BB%B6%E5%BA%A6%E9%87%8F%E6%96%B9%E6%A1%88/",
          "author": "zhangjintao9020@gmail.com (张晋涛)",
          "description": "大家好，我是张晋涛。\n\n群里有个小伙伴问了我上图中这个问题，如何度量滚动升级这个过程的时间。\n这个问题可以抽象为一种通用需求，适用于多种场景。\n比如你是 Kubernetes 集群的管理员，你想度量这个过程中的耗时，以便发现优化点；\n比如你是在做 CI/CD ，你想通过度量这个过程的耗时，来给出 CI/CD 过程的耗时；\n现有方案\nKubernetes 已经提供了很方便的办法来解决此问题，也就是我回复中谈到的，通过 event 来度量即可。\n比如，我们在 K8S 中，创建一个 deployment，看看这个过程中的 event 信息：\n➜ ~ kubectl create ns moelove\nnamespace/moelove created\n➜ ~ kubectl -n moelove create deployment redis --image=ghcr.io/moelove/redis:alpine\ndeployment.apps/redis created\n➜ ~ kubectl -n moelove get deploy\nNAME READY UP-TO-DATE AVAILABLE AGE\nredis 1/1 1 1 16s\n➜ ~ kubectl -n moelove get events\nLAST SEEN TYPE REASON OBJECT MESSAGE\n27s Normal Scheduled pod/redis-687967dbc5-gsz5n Successfully assigned moelove/redis-687967dbc5-gsz5n to kind-control-plane\n27s Normal Pulled pod/redis-687967dbc5-gsz5n Container image \"ghcr.io/moelove…",
          "link": "https://moelove.info/2021/06/25/%E6%9B%B4%E4%BC%98%E9%9B%85%E7%9A%84-Kubernetes-%E9%9B%86%E7%BE%A4%E4%BA%8B%E4%BB%B6%E5%BA%A6%E9%87%8F%E6%96%B9%E6%A1%88/",
          "publishedOn": "2021-06-24T21:53:03.000Z",
          "wordCount": 464,
          "title": "更优雅的 Kubernetes 集群事件度量方案"
        },
        {
          "id": "https://moelove.info/2021/06/23/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%9A%84-5-%E5%B9%B4%E9%95%BF%E8%B7%91runc-v1.0-%E7%BB%88%E4%BA%8E%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83/",
          "author": "zhangjintao9020@gmail.com (张晋涛)",
          "description": "本文我来分享下与我们（搞容器化/K8S 从业者）息息相关的一个基础项目 runc 是如何自 2016 年发布了 v1.0.0-rc1 到现在历经 5 年长跑，从 rc1 一直到 rc95 ，如今终于正式发布 v1.0 版本的过程，及这中间的故事。\n大家好，我是张晋涛。\n在 2018 年 11 月底时，我写了一篇文章 《runc 1.0-rc6 发布之际》 , 那应该是我第一次公开介绍 runc。如果你还不了解 runc 是什么，以及如何使用它，请参考我那篇文章。本文中不再对其概念和用法等进行说明。\n在 2019 年 3 月底时，我写了另一篇文章 《runc 1.0-rc7 发布之际》，介绍 runc 1.0-rc7 发布的原因，及那个版本中最主要的修复 CVE-2019-5736 。其中也介绍了关于 runc/Docker 等对于 Linux 内核兼容性的问题，感兴趣的小伙伴可以看看。\n关注我的朋友们，应该也在 K8S 生态周报 中多次看到过我对 runc 的介绍，包括其特性及安全漏洞等方面。\n在 2015 年 6 月， Docker ，CoreOS 和其他一些公司共同成立了 OCI （开放容器计划） 组织，其最主要的内容有两个：\n容器运行时规范\n容器镜像规范\nDocker 将其运行时捐赠给了 OCI ，作为容器运行时规范的基础实现，托管在了 https://github.com/opencontainers/runc 也就是现在大家看到的 runc 了。\n发布历程\n我们来看看 runc 版本发布的历程，以便了解它为何长跑 5 年。\nrunc version\nrelease time\nruntime-spec version\n备注\n\n\n\n\nrunc v1.0-rc1\n2016.06.04\nv1.0.0-rc1\n\n\n\nrunc v1.0-rc2\n2016.10.01\nv1.0…",
          "link": "https://moelove.info/2021/06/23/%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E7%9A%84-5-%E5%B9%B4%E9%95%BF%E8%B7%91runc-v1.0-%E7%BB%88%E4%BA%8E%E6%AD%A3%E5%BC%8F%E5%8F%91%E5%B8%83/",
          "publishedOn": "2021-06-22T18:08:20.000Z",
          "wordCount": 302,
          "title": "开源项目的 5 年长跑，runc v1.0 终于正式发布！"
        },
        {
          "id": "https://moelove.info/2021/06/17/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/",
          "author": "zhangjintao9020@gmail.com (张晋涛)",
          "description": "TL;DR\n我们需要对 container 供应链进行更好的元数据管理，以便更好地进行分析;\nOCI 规范目前没有办法打包容器镜像工件或一组容器镜像。但他们会慢慢做到这一点；\n同时，我们需要一个用于容器镜像的包管理器；\n一些背景\n我维护着一个叫做 Tern 的开源项目，这个项目是为容器镜像生成一个软件材料清单（SBOM）。很多安装在容器镜像中的组件都是独立安装的，而非通过包管理器。这使得我们很难弄清楚创建这个容器镜像的作者的意图。它也没有提供更多关于容器镜像贡献者的信息。大多数容器镜像都是基于之前已有的容器镜像，通过客户端工具或者镜像仓库都很难看到这些信息。\n我想如果有一个“容器镜像”的包管理器，应该能解决这个问题。因此，我早在 KubeCon 2018 的时候就提出了 \"打包\" 的想法，我问容器镜像的 manifest 是否可以保存这些信息，以便工具可以根据容器镜像的供应链来进行分析。\n事实证明，社区已经在考虑如何管理 helm chart、OPA 策略、文件系统和签名等事情了。这就是我参与 开放容器计划（OCI）组织  的原因（我还欠 @vbatts 一个介绍我的人情）。当时的理解是，容器镜像除了需要通过摘要来进行识别外，不需要进行其他管理。也不需要管理依赖，因为所有的依赖都被打包进了容器镜像中。通过再次重建容器和保持一个下游消费者可以 pull 的滚动标签来处理更新。\n然而，容器生态除了可移植性外，并没有提供太多东西。和容器镜像一起管理容器元数据可以为使用者和贡献者提供更多关于供应链的宝贵信息。经过了两年时间和几次供应链攻击之后，我们仍然在讨论，如何最好的做到这一点。在这里，我试图将一些提议的概念归纳起来，看看它们如何满足我们对元数据管理的要求。\n回到起点\n我们写一个包管理器主要有以下三个原因：\n标识 - 为你的新文件或者包提供一个名字和其他唯一可识别的特征；\n上下文…",
          "link": "https://moelove.info/2021/06/17/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E9%9C%80%E8%A6%81%E4%B8%80%E4%B8%AA%E5%AE%B9%E5%99%A8%E9%95%9C%E5%83%8F%E7%9A%84%E5%8C%85%E7%AE%A1%E7%90%86%E5%99%A8/",
          "publishedOn": "2021-06-17T15:55:43.000Z",
          "wordCount": 169,
          "title": "为什么我们需要一个容器镜像的包管理器"
        }
      ]
    }
  ],
  "cliVersion": "1.11.0"
}